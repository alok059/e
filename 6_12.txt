Experiment 6 (Multiplexer) To design and implement a 4:1 multiplexer

module mux_4to1;
   reg [3:0] in;
   reg [1:0] sel;
   wire out;


   assign out = (sel == 2'b00) ? in[0] :
                (sel == 2'b01) ? in[1] :
                (sel == 2'b10) ? in[2] :
                (sel == 2'b11) ? in[3] : 1'bx; 


   initial begin
       $display("Sel | Inputs | Out");
       in = 4'b1010;
       for (sel = 0; sel < 4; sel = sel + 1) begin
           #1 $display("%b | %b | %b", sel, in, out);
       end
       sel = 2'bx; #1 $display("x | %b | %b", in, out);
   end
endmodule


Experiment 7 (Demultiplexer) To design and implement a 1:4 demultiplexer.

module demux_1to4;
   reg in;
   reg [1:0] sel;
   wire [3:0] out;


   assign out[0] = (sel == 2'b00) ? in : 1'b0;
   assign out[1] = (sel == 2'b01) ? in : 1'b0;
   assign out[2] = (sel == 2'b10) ? in : 1'b0;
   assign out[3] = (sel == 2'b11) ? in : 1'b0;


   initial begin
       $display("Sel In | Out");
       in = 1;
       for (sel = 0; sel < 4; sel = sel + 1) begin
           #1 $display("%b %b | %b", sel, in, out);
       end
   end
endmodule


Experiment 8 (Decoder) To design and verify a 2:4 decoder. 

module decoder_2to4;
   reg [1:0] in;
   wire [3:0] out;


   assign out[0] = ~in[1] & ~in[0];
   assign out[1] = ~in[1] & in[0];
   assign out[2] = in[1] & ~in[0];
   assign out[3] = in[1] & in[0];


   initial begin
       $display("In | Out");
       for (in = 0; in < 4; in = in + 1) begin
           #1 $display("%b | %b", in, out);
       end
       #1 $finish;
   end
endmodule

Experiment 9 (Encoder) To design and implement a 4:2 encoder. 

module encoder_4to2;
   reg [3:0] in;
   reg [1:0] out;


   always @(*) begin
       case (in)
           4'b0001: out = 2'b00;
           4'b0010: out = 2'b01;
           4'b0100: out = 2'b10;
           4'b1000: out = 2'b11;
           default: out = 2'bxx; 
       endcase
   end


   initial begin
       $display("In    | Out");
       in = 4'b0001; #1 $display("%b | %b", in, out);
       in = 4'b0010; #1 $display("%b | %b", in, out);
       in = 4'b0100; #1 $display("%b | %b", in, out);
       in = 4'b1000; #1 $display("%b | %b", in, out);
       in = 4'b1010; #1 $display("%b | %b", in, out); 
   end
endmodule


Experiment 10 (Flip-Flops) Design and verify the operation of D flip-flops using logic gates. 

module d_flipflop;
   reg D, clk;
   reg Q;


   always @(posedge clk) Q <= D;


   initial begin
       clk = 0;
       D = 0;
       #1 clk = 1; #1 $display("D=%b clk=%b | Q=%b", D, clk, Q);
       D = 1;
       #1 clk = 0; #1 $display("D=%b clk=%b | Q=%b", D, clk, Q);
   end
endmodule


Experiment 11 (Flip-Flops ) To design and verify the operation of JK flip-flops using logic gates. 

module jk_flipflop;
   reg J, K, clk;
   wire Q;
   reg Q_int;


   always @(posedge clk) begin
       if (J & ~K) Q_int <= 1;
       else if (~J & K) Q_int <= 0;
       else if (J & K) Q_int <= ~Q_int;
   end


   assign Q = Q_int;


   initial begin
       clk = 0;
       Q_int = 0;
       $display("J K clk | Q");
       J = 0; K = 0; #1 clk = 1; #1 $display("%b %b %b | %b", J, K, clk, Q);
       J = 0; K = 1; #1 clk = 0; #1 clk = 1; #1 $display("%b %b %b | %b", J, K, clk, Q);
       J = 1; K = 0; #1 clk = 0; #1 clk = 1; #1 $display("%b %b %b | %b", J, K, clk, Q);
       J = 1; K = 1; #1 clk = 0; #1 clk = 1; #1 $display("%b %b %b | %b", J, K, clk, Q);
   end
endmodule

Experiment 12 (Counter) To verify the operation of an asynchronous counter

module async_counter(input clk, output reg [3:0] Q);


   initial begin
       Q = 4'b0000; 
   end


   always @(posedge clk) begin
       Q <= Q + 1;
   end


endmodule


module async_counter_tb;
   reg clk;
   wire [3:0] Q;
   async_counter uut (.clk(clk), .Q(Q));


   initial begin
       clk = 0;
       $display("Count");
       forever begin
           #5 clk = ~clk; 
       end
   end


   initial begin
       forever begin
           #6 $display("%b", Q);
       end
   end
endmodule


