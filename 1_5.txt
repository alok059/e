Experiment 1: To study and verify the truth table of various logic gates.
module logic_gates;
   reg a, b;
   wire not_a, and_ab, or_ab, nand_ab, nor_ab, xor_ab, xnor_ab;

   not (not_a, a);
   and (and_ab, a, b);
   or (or_ab, a, b);
   nand (nand_ab, a, b);
   nor (nor_ab, a, b);
   xor (xor_ab, a, b);
   xnor (xnor_ab, a, b);


   initial begin
       $display("A B | NOT AND OR NAND NOR XOR XNOR");
       a = 0; b = 0; #1 $display("%b %b | %b   %b   %b   %b    %b   %b    %b", a, b, not_a, and_ab, or_ab, nand_ab, nor_ab, xor_ab, xnor_ab);
       a = 0; b = 1; #1 $display("%b %b | %b   %b   %b   %b    %b   %b    %b", a, b, not_a, and_ab, or_ab, nand_ab, nor_ab, xor_ab, xnor_ab);
       a = 1; b = 0; #1 $display("%b %b | %b   %b   %b   %b    %b   %b    %b", a, b, not_a, and_ab, or_ab, nand_ab, nor_ab, xor_ab, xnor_ab);
       a = 1; b = 1; #1 $display("%b %b | %b   %b   %b   %b    %b   %b    %b", a, b, not_a, and_ab, or_ab, nand_ab, nor_ab, xor_ab, xnor_ab);
       a = 1'bx; b = 1'bx; #1 $display("x x | %b   %b   %b   %b    %b   %b    %b", not_a, and_ab, or_ab, nand_ab, nor_ab, xor_ab, xnor_ab);
   end
endmodule


Experiment 2 (Half Adder) S= (x+y)(x’+y’) C= xy 
module half_adder;
   reg x, y;
   wire S, C;


   assign S = (x | y) & (~x | ~y);
   assign C = x & y;


   initial begin
       $display("X Y | S C");
       x = 0; y = 0; #1 $display("%b %b | %b %b", x, y, S, C);
       x = 0; y = 1; #1 $display("%b %b | %b %b", x, y, S, C);
       x = 1; y = 0; #1 $display("%b %b | %b %b", x, y, S, C);
       x = 1; y = 1; #1 $display("%b %b | %b %b", x, y, S, C);
       x = 1'bx; y = 1; #1 $display("x %b | %b %b", y, S, C);
   end
endmodule


Experiment 3 (Full Adder) S = x’y’z+x’yz’+xy’z’+xyz C=xy+xz+yz 

module full_adder;
   reg x, y, z;
   wire S, C;


   assign S = (~x & ~y & z) | (~x & y & ~z) | (x & ~y & ~z) | (x & y & z);
   assign C = (x & y) | (y & z) | (x & z);


   initial begin
       $display("X Y Z | S C");
       x = 0; y = 0; z = 0; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 0; y = 0; z = 1; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 0; y = 1; z = 0; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 0; y = 1; z = 1; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 1; y = 0; z = 0; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 1; y = 0; z = 1; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 1; y = 1; z = 0; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
       x = 1; y = 1; z = 1; #1 $display("%b %b %b | %b %b", x, y, z, S, C);
   end
endmodule


Experiment 4 (Half Subtractor) using D = x’y +xy’ B=x’y 

module half_subtractor;
   reg x, y;
   wire D, B;


   assign D = (~x & y) | (x & ~y);
   assign B = ~x & y;


   initial begin
       $display("X Y | D B");
       x = 0; y = 0; #1 $display("%b %b | %b %b", x, y, D, B);
       x = 0; y = 1; #1 $display("%b %b | %b %b", x, y, D, B);
       x = 1; y = 0; #1 $display("%b %b | %b %b", x, y, D, B);
       x = 1; y = 1; #1 $display("%b %b | %b %b", x, y, D, B);
   end
endmodule


Experiment 5 (Number Converter) 
Design a BCD to Excess 3 code converter using combinational circuits. 

module bcd_to_excess3;
   reg [3:0] bcd;
   wire [3:0] excess3;
   integer i;  

   assign excess3 = (bcd <= 4'b1001) ? (bcd + 4'b0011) : 4'bxxxx;

   initial begin
       $display("BCD  | Excess-3");
       for (i = 0; i <= 15; i = i + 1) begin
           bcd = i[3:0]; 
           #1 $display("%b | %b", bcd, excess3);
       end
       #1 $finish; 
   end
endmodule
























